name: EventFlow iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.4'
        cache: true
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Install lcov for coverage reports
      run: sudo apt-get update && sudo apt-get install -y lcov
    
    - name: Create test reports directory
      run: mkdir -p test_reports coverage
    
    - name: Verify formatting
      run: |
        dart format --output=none --set-exit-if-changed . || echo "‚ùå Format check failed" >> test_reports/failures.txt
    
    - name: Analyze project source
      run: |
        flutter analyze --fatal-infos > test_reports/analysis.txt 2>&1 || echo "‚ùå Analysis failed" >> test_reports/failures.txt
    
    - name: Run unit tests with coverage
      run: |
        flutter test --coverage --reporter json > test_reports/test_results.json 2>&1
        echo "‚úÖ All tests passed successfully!"
    
    - name: Generate coverage report
      run: |
        if [ -f coverage/lcov.info ]; then
          lcov --summary coverage/lcov.info > test_reports/coverage_summary.txt 2>&1 || true
        else
          echo "No coverage data generated" > test_reports/coverage_summary.txt
        fi
    
    - name: Check test results and generate agent feedback
      run: |
        if [ -f test_reports/failures.txt ]; then
          echo "üìã Test failures detected. Check test_reports/ for details."
          echo "
        ## üö® Agent Feedback Required
        
        Test failures detected in this CI run. Please check:
        - test_reports/failures.txt for summary
        - test_reports/analysis.txt for static analysis issues  
        - test_reports/test_results.json for test results
        - test_reports/coverage_summary.txt for coverage issues
        
        **Next Steps:**
        1. Review failing tests and fix systematically
        2. Run 'flutter test' locally to verify fixes
        3. Use automated CI feedback system for detailed error analysis
        " > test_reports/AGENT_INSTRUCTIONS.md
          echo "‚ùå Test failures detected - CI will fail"
          exit 1
        else
          echo "‚úÖ All tests passed - 100% success rate achieved!"
        fi
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: test_reports/
    
    - name: Upload coverage reports  
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: coverage/
        
    - name: Generate HTML coverage report
      if: always()
      run: |
        if [ -f coverage/lcov.info ]; then
          genhtml coverage/lcov.info -o coverage/html
          echo "üìä Coverage report generated at coverage/html/index.html"
        fi
    
    - name: Auto-generate agent feedback on failure
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Generate detailed feedback from CI logs (with authentication)
        python3 scripts/auto_ci_feedback.py
        
        # Configure git for automated commits
        git config user.name "EventFlow CI Bot"
        git config user.email "ci@eventflow.app"
        
        # Only commit if AGENT_FEEDBACK.md was updated
        if git diff --quiet AGENT_FEEDBACK.md; then
          echo "üìù No feedback changes to commit"
        else
          git add AGENT_FEEDBACK.md
          git commit -m "ü§ñ Auto-generated CI feedback for agent - $(date '+%Y-%m-%d %H:%M')"
          
          # Push back to the branch (works for both push and PR events)
          git push origin HEAD:${{ github.ref_name }}
          echo "‚úÖ Agent feedback committed and pushed"
        fi

  build:
    name: iOS Build
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.4'
        cache: true
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build iOS (no signing)
      run: flutter build ios --no-codesign --debug
    
    - name: Upload iOS build
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: build/ios/iphoneos/Runner.app
