#!/bin/bash
# Setup GitHub webhooks for interactive CI feedback

echo "🔗 Setting up GitHub Actions webhook integration for EventFlow"

# Create webhook payload processor
cat > scripts/process_ci_webhook.py << 'EOF'
#!/usr/bin/env python3
"""
GitHub Actions Webhook Processor for EventFlow
Processes CI failure notifications and generates agent feedback
"""

import json
import sys
import subprocess
from datetime import datetime

def process_failure_notification(payload_file):
    """Process CI failure webhook payload"""
    try:
        with open(payload_file, 'r') as f:
            payload = json.load(f)
        
        print(f"🚨 CI Failure Detected")
        print(f"Repository: {payload['repository']}")
        print(f"Branch: {payload['branch']}")
        print(f"Commit: {payload['commit'][:8]}")
        print(f"Workflow: {payload['workflow']}")
        print(f"Timestamp: {payload['timestamp']}")
        
        # Generate agent instructions
        agent_instructions = f"""
# Automated CI Failure Report - {datetime.now().strftime('%Y-%m-%d %H:%M')}

## 🤖 GitHub Actions Failure Detected

**Repository**: {payload['repository']}
**Branch**: {payload['branch']}
**Commit**: {payload['commit'][:8]}
**Workflow**: {payload['workflow']}
**Artifacts**: {payload.get('artifacts_url', 'N/A')}

## 🎯 Agent Actions Required

1. **Download test artifacts** from GitHub Actions run
2. **Review test_reports/failures.txt** for specific issues
3. **Check test_reports/analysis.txt** for static analysis problems
4. **Fix failing tests** using structured feedback
5. **Re-run tests locally** to verify fixes
6. **Push fixes** and monitor next CI run

## 📋 Webhook Integration Active

This report was automatically generated by GitHub Actions webhook.
The CI pipeline detected failures and generated this agent feedback.

**Next Steps**: Copy this content to AGENT_FEEDBACK.md and ask agent to fix issues.
"""
        
        # Write agent instructions
        with open('AGENT_FEEDBACK_WEBHOOK.md', 'w') as f:
            f.write(agent_instructions)
        
        print("✅ Agent feedback file generated: AGENT_FEEDBACK_WEBHOOK.md")
        print("📋 Ready for agent processing")
        
        return True
        
    except Exception as e:
        print(f"❌ Error processing webhook payload: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 process_ci_webhook.py <payload_file>")
        sys.exit(1)
    
    payload_file = sys.argv[1]
    success = process_failure_notification(payload_file)
    sys.exit(0 if success else 1)
EOF

chmod +x scripts/process_ci_webhook.py

echo "✅ Webhook processor created: scripts/process_ci_webhook.py"

# Create webhook testing script
cat > scripts/test_webhook.sh << 'EOF'
#!/bin/bash
# Test webhook integration locally

echo "🧪 Testing webhook integration locally"

# Create test failure payload
cat > test_failure_payload.json << EOL
{
  "repository": "Josh-thephillipsequation/Eventflow",
  "branch": "feature/core-ci-testing-foundation",
  "commit": "bb8c587f1234567890abcdef",
  "workflow": "EventFlow CI/CD Pipeline",
  "job": "test",
  "status": "failed",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "artifacts_url": "https://github.com/Josh-thephillipsequation/Eventflow/actions/runs/123456",
  "message": "EventFlow CI tests failed - agent feedback required"
}
EOL

# Process the test payload
python3 scripts/process_ci_webhook.py test_failure_payload.json

echo "🎯 Webhook test complete! Check AGENT_FEEDBACK_WEBHOOK.md"
rm test_failure_payload.json
EOF

chmod +x scripts/test_webhook.sh

echo "✅ Webhook test script created: scripts/test_webhook.sh"

echo "
🔗 Webhook Integration Setup Complete!

## How to Use:

### 1. Test Locally
Run: ./scripts/test_webhook.sh

### 2. GitHub Actions Integration
- Webhook payloads are automatically created in CI failures
- Download artifacts to get failure_notification.json
- Process with: python3 scripts/process_ci_webhook.py failure_notification.json

### 3. Real-time Integration (Advanced)
- Set up GitHub webhook endpoint pointing to your server
- Process incoming webhooks with the Python script
- Automatically generate agent feedback for CI failures

### 4. Agent Feedback Loop
- Webhook generates AGENT_FEEDBACK_WEBHOOK.md
- Human reviews and asks agent to fix issues
- Agent reads structured feedback and resolves problems
- Push fixes trigger new CI run with webhook reporting

🎯 Interactive CI with automated agent feedback is now ready!
"
