#!/usr/bin/env python3
"""
GitHub Actions Webhook Processor for EventFlow
Processes CI failure notifications and generates agent feedback
"""

import json
import sys
import subprocess
from datetime import datetime

def process_failure_notification(payload_file):
    """Process CI failure webhook payload"""
    try:
        with open(payload_file, 'r') as f:
            payload = json.load(f)
        
        print(f"üö® CI Failure Detected")
        print(f"Repository: {payload['repository']}")
        print(f"Branch: {payload['branch']}")
        print(f"Commit: {payload['commit'][:8]}")
        print(f"Workflow: {payload['workflow']}")
        print(f"Timestamp: {payload['timestamp']}")
        
        # Generate agent instructions
        agent_instructions = f"""
# Automated CI Failure Report - {datetime.now().strftime('%Y-%m-%d %H:%M')}

## ü§ñ GitHub Actions Failure Detected

**Repository**: {payload['repository']}
**Branch**: {payload['branch']}
**Commit**: {payload['commit'][:8]}
**Workflow**: {payload['workflow']}
**Artifacts**: {payload.get('artifacts_url', 'N/A')}

## üéØ Agent Actions Required

1. **Download test artifacts** from GitHub Actions run
2. **Review test_reports/failures.txt** for specific issues
3. **Check test_reports/analysis.txt** for static analysis problems
4. **Fix failing tests** using structured feedback
5. **Re-run tests locally** to verify fixes
6. **Push fixes** and monitor next CI run

## üìã Webhook Integration Active

This report was automatically generated by GitHub Actions webhook.
The CI pipeline detected failures and generated this agent feedback.

**Next Steps**: Copy this content to AGENT_FEEDBACK.md and ask agent to fix issues.
"""
        
        # Write agent instructions
        with open('AGENT_FEEDBACK_WEBHOOK.md', 'w') as f:
            f.write(agent_instructions)
        
        print("‚úÖ Agent feedback file generated: AGENT_FEEDBACK_WEBHOOK.md")
        print("üìã Ready for agent processing")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error processing webhook payload: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 process_ci_webhook.py <payload_file>")
        sys.exit(1)
    
    payload_file = sys.argv[1]
    success = process_failure_notification(payload_file)
    sys.exit(0 if success else 1)
